#!/usr/bin/python
#
#

#This Python 2 program reads the data from an LSM303D and an L3GD20H which are both attached to the I2C bus of a Raspberry Pi.
#Both can be purchased as a unit from Pololu as their MinIMU-9 v3 Gyro, Accelerometer, and Compass  product.
#
#First follow the procedure to enable I2C on R-Pi.
#1. Add the lines "ic2-bcm2708" and "i2c-dev" to the file /etc/modules
#2. Comment out the line "blacklist ic2-bcm2708" (with a #) in the file /etc/modprobe.d/raspi-blacklist.conf
#3. Install I2C utility (including smbus) with the command "apt-get install python-smbus i2c-tools"
#4. Connect the I2C device to the SDA and SCL pins of the Raspberry Pi and detect it using the command "i2cdetect -y 1".  It should show up as 1D (typically) or 1E (if the jumper is set).

import os.path
import time, math
import rospy
import sys

my_dir = os.path.dirname(__file__)
robot_src_dir = os.path.abspath(os.path.join(my_dir, '../src/sailing_robot/src'))
sys.path.append(robot_src_dir)

from sailing_robot.imu_utils import ImuReader


IMU_BUS = 1
LSM = 0x1e #Device I2C slave address
LGD = 0x6a #Device I2C slave address
data_X = []
data_Y = []

imu = ImuReader(IMU_BUS, LSM, LGD)
imu.check_status()
imu.configure_for_reading()

for i in range(300):
    try:
        #Read data from the chips ----------------------
        time.sleep(0.1)
        _, magy, magz = imu.read_mag_field()

        data_X.append(magy)
        data_Y.append(magz)

        minx = min(data_X)
        miny = min(data_Y)
        maxx = max(data_X)
        maxy = max(data_Y)
        print
        print(minx)
        print(maxx)
        print(miny)
        print(maxy)
    except KeyboardInterrupt:
        print("Interrupted")
        break



minx = min(data_X)
miny = min(data_Y)

maxx = max(data_X)
maxy = max(data_Y)

offset_X = (maxx + minx)/2
offset_Y = (maxy + miny)/2

range_X = maxx - minx
range_Y = maxy - miny

print("Now hold still the wind vane in direction of the bow, and press enter when ready")
raw_input()

_, magy, magz = imu.read_mag_field()

magy = (magy - offset_X) * range_X
magz = (magz - offset_Y) * range_Y
angle_offset = math.atan2(magy, magz)*(180/math.pi) % 360

#angle_offset = int((angle_offset + 45)/90)*90 % 360




rospy.set_param('/calibration/wind_dir', {'XOFFSET': offset_Y,
                                          'YOFFSET': offset_Y,
                                          'XSCALE': range_X,
                                          'YSCALE': range_Y,
                                          'ANGLEOFFSET': angle_offset,
                                          })


print
print("XOFFSET = " + str(offset_X))
print("YOFFSET = " + str(offset_Y))
print("XSCALE = " + str(range_X))
print("YSCALE = " + str(range_Y))
print("ANGLEOFFSET = " + str(angle_offset))
