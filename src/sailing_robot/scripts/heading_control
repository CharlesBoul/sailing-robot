#!/usr/bin/env python
#
# Node receives current waypoint from path planner
# calculates goal heading for reaching the waypoint as fast as possible

import rospy
from std_msgs.msg import Float32
from std_msgs.msg import Float64
from std_msgs.msg import String
import highlevel_control
from highlevel_control.heading_planning import HeadingPlan
from sensor_msgs.msg import NavSatFix


def goal_heading_publisher(heading_data):
    pub = rospy.Publisher("/goal_heading", Float32, queue_size=10)
    pub_state = rospy.Publisher("/sailing_state", String, queue_size=10)
    rate = rospy.Rate(rospy.get_param("/config/rate"))

    while not rospy.is_shutdown():
        state, goal_heading = heading_data.calculate_state_and_goal()
        pub.publish(goal_heading)
        pub_state.publish(state)
        rate.sleep()


if __name__ == '__main__':
    try:
        rospy.init_node("publish_goal_heading", anonymous=True)
        tackline_dist = rospy.get_param("/navigation/tackline_distance") / 1000 # m to km
        deadzone = rospy.get_param("/navigation/deadzone")
        heading_data = HeadingPlan(beating_angle=deadzone, tack_line_offset=tackline_dist)
        rospy.Subscriber('/heading', Float32, heading_data.update_heading)
        rospy.Subscriber('/next_wp', NavSatFix, heading_data.update_waypoint)
        rospy.Subscriber('/wind_direction_apparent', Float64, heading_data.update_wind_direction)
        rospy.Subscriber('/position', NavSatFix, heading_data.update_position)
        goal_heading_publisher(heading_data)
    except rospy.ROSInterruptException:
        pass
