#!/usr/bin/python
#
# Simulator for the boat position based on velocity and heading


import rospy
from std_msgs.msg import Float64, Float32
import time, math
from sensor_msgs.msg import NavSatFix
from sailing_robot.msg import velocity

from sailing_robot import Navigation


class Position_simu():
    def __init__(self):
        """ Publish position based on velocity and heading
        """
        self.position_pub = rospy.Publisher('/position', NavSatFix, queue_size=10)

        rospy.init_node("simulation_position", anonymous=True)

        rospy.Subscriber('/heading', Float32, self.update_heading)
        self.heading = 0
        rospy.Subscriber('/velocity', velocity, self.update_velocity)
        self.velocity = (0,0,0)

        self.freq = rospy.get_param("/config/rate")
        self.rate = rospy.Rate(self.freq)

        init_position_lat = rospy.get_param("/simulator/position_init/latitude")
        init_position_lon = rospy.get_param("/simulator/position_init/longitude")

        self.utm_position = Navigation.latlon_to_utm(init_position_lat, init_position_lon)

        rospy.loginfo("Position simulated")

        self.position_publisher()


    def update_heading(self, msg):
        self.heading = msg.data

    def update_velocity(self, msg):
        self.velocity = msg.data

    def position_publisher(self):

        while not rospy.is_shutdown():
            
            dx = (self.velocity[0] * math.cos(math.radians(self.heading)) + \
                self.velocity[1] * math.sin(math.radians(self.heading))) / self.freq

            dy = (self.velocity[0] * math.sin(math.radian(self.heading)) - \
                self.velocity[1] * math.cos(math.radians(self.heading))) / self.freq
            
            self.utm_position = (self.utm_position[0] + dx, self.utm_position[1] + dy)

            position = Navigation.utm_to_latlon(self.utm_position)

            self.position_pub(position)

            self.rate.sleep()


if __name__ == '__main__':
    try:
        Wind_direction_simu()
    except rospy.ROSInterruptException:
        pass

