#!/usr/bin/python

import serial
import pynmea2
import re
import time
import traceback

import rospy
from std_msgs.msg import Int16
from sensor_msgs.msg import NavSatFix
from sailing_robot.msg import gpswtime

serial_port = serial.Serial("/dev/serial0", 9600, timeout=0.5)

def decimal_degrees(d_m, hemisphere):
    """Convert the degrees & minutes number from the GPS to decimal degrees
    
    We get the degrees and minutes unseparated, i.e. (100*degrees)+minutes
    """
    m = re.match(r'(\d+)(\d{2}\.\d+)', str(d_m))
    if not m:
        raise ValueError(d_m)
    degrees, minutes = m.group(1, 2)
    res = int(degrees) + (float(minutes) / 60)
    if hemisphere in 'SW':
        return -res
    return res

def pos_publisher():
    gps_reader = pynmea2.NMEAStreamReader()
    serial_port.readline()  # Discard first line in case it's partial
    while not rospy.is_shutdown():
        line = serial_port.readline()
        if not line.strip():
            continue

        try:
            batch = gps_reader.next(line)
        except (pynmea2.ParseError, pynmea2.ChecksumError, UnicodeError):
            s = "Error parsing GPS data.\nbuffer={!r}\nline={!r}\n{}".format(
                        gps_reader.buffer, line, traceback.format_exc()
            )
            rospy.logerr(s)
            gps_reader.stream = b''
            continue

        for sentence in batch:
            if sentence.sentence_type != 'GGA':
                continue

            msg = NavSatFix()
            if sentence.lat == '':
                continue
            msg.latitude = decimal_degrees(sentence.lat, sentence.lat_dir)
            msg.longitude = decimal_degrees(sentence.lon, sentence.lon_dir)
            pos_pub.publish(msg)
            nsats_pub.publish(int(sentence.num_sats))
            
            wtime = gpswtime()
            wtime.fix = msg
            wtime.time_h = sentence.timestamp.hour
            wtime.time_m = sentence.timestamp.minute
            wtime.time_s = sentence.timestamp.second
            gps_pub.publish(wtime)

def set_gps_options():
    '''Send ublox commands to turn off some data and change GPS rate to 5Hz.
    
    Thanks to Simon of team Anemoi for info on how to do this.
    '''
    if not rospy.get_param('change_gps_rate', False):
        return
    
    serial_port.write(b'\xB5\x62\x06\x01\x08\x00\xF0\x02\x00\x00\x00\x00\x00\x01\x02\x32\x10\x13')
    time.sleep(1)

    # GxGSV off
    serial_port.write(b'\xB5\x62\x06\x01\x08\x00\xF0\x03\x00\x00\x00\x00\x00\x01\x03\x39\x10\x13')
    time.sleep(1)

    # GxRMC off
    serial_port.write(b'\xB5\x62\x06\x01\x08\x00\xF0\x04\x00\x00\x00\x00\x00\x01\x04\x40\x10\x13')
    time.sleep(1)

    # GxVTG off
    serial_port.write(b'\xB5\x62\x06\x01\x08\x00\xF0\x05\x00\x00\x00\x00\x00\x01\x05\x47\x10\x13')
    time.sleep(1)

    # GxGLL off
    serial_port.write(b'\xB5\x62\x06\x01\x08\x00\xF0\x01\x00\x00\x00\x00\x00\x01\x01\x2B\x10\x13')
    time.sleep(1)

    # NMEA rate: 5Hz
    serial_port.write(b'\xB5\x62\x06\x08\x06\x00\xC8\x00\x01\x00\x01\x00\xDE\x6A\x10\x13')
    time.sleep(1)

if __name__ == '__main__':
    try:
        set_gps_options()
        pos_pub = rospy.Publisher('position', NavSatFix, queue_size=10)
        gps_pub = rospy.Publisher('gps_fix', gpswtime, queue_size=10)
        nsats_pub = rospy.Publisher('gps_satellites', Int16, queue_size=10)
        rospy.init_node("sensor_driver_gps", anonymous=True)
        pos_publisher()
    except rospy.ROSInterruptException:
        pass
