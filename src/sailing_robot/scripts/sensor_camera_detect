#!/usr/bin/python
# READY FOR MIT

from std_msgs.msg import String

import collections
import rospy
import time

import numpy as np
import cv2


class Camera_detection():
    """
        Node that publish event when the obstacle is detected
    """
    def __init__(self):
        
        self.publisher = rospy.Publisher('camera_detection', String, queue_size=10)

        rospy.init_node("sensor_camera_detect", anonymous=True)

        sensor_rate = rospy.get_param("camera_detection/rate")
        self.rate = rospy.Rate(sensor_rate)
        self.Lower = np.array( rospy.get_param('camera_detection/Lower_color'))
        self.Upper = np.array( rospy.get_param('camera_detection/Upper_color'))
        self.threshold = rospy.get_param('camera_detection/threshold')
        AVE_TIME = rospy.get_param("camera_detection/average_time")   # lengh of the averaging in seconds
        self.AVE_SIZE = int(AVE_TIME * sensor_rate)                        # size of the averaging sample
        self.average_list = collections.deque(maxlen = self.AVE_SIZE)
        self.publish()

    def publish(self):


        Lower_hsv1 = np.array( rospy.get_param('camera_detection/Lower_color_hsv1'))
        Upper_hsv1 = np.array( rospy.get_param('camera_detection/Upper_color_hsv1'))
        Lower_hsv2 = np.array( rospy.get_param('camera_detection/Lower_color_hsv2'))
        Upper_hsv2 = np.array( rospy.get_param('camera_detection/Upper_color_hsv2'))


        camera = cv2.VideoCapture(0) 
        for i in range(50):
            (bool, image) = camera.read()

        rospy.logwarn('Camera ready')
        image_size = image.shape[0]*image.shape[1]
        self.rate.sleep()

        while not rospy.is_shutdown():

            (bool, image) = camera.read()
            if bool:
                hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
                mask_hsv1 = cv2.inRange(hsv, Lower_hsv1, Upper_hsv1)
                mask_hsv2 = cv2.inRange(hsv, Lower_hsv2, Upper_hsv2)
             
                # percentage of the image that contains the expected colors
                percent_detect1 = 1.0*cv2.countNonZero(mask_hsv1)  / image_size # percentage of the image that contains the expected colors
                percent_detect2 = 1.0*cv2.countNonZero(mask_hsv2)  / image_size # percentage of the image that contains the expected colors
                
                if percent_detect1+percent_detect2  >= self.threshold: 
                    self.average_list.append(1)
                else:
                    self.average_list.append(0)
                
                if sum(self.average_list)/self.AVE_SIZE > 0.5:
                    msg = 'detected'
                else:
                    msg = 'nothing'


                self.publisher.publish(msg)

            self.rate.sleep() 


if __name__ == '__main__':
    try:
        Camera_detection()
    except rospy.ROSInterruptException:
        pass

